/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:


    TreeNode* Tree(vector<int>&inorder, int inS, int inE, vector<int>&postorder, int poS, int poE, map<int, int>&inMap){

        if(inS > inE  ||  poS>poE){
            return NULL;
        }

        TreeNode* root=new TreeNode(postorder[poE]);

        // int inRoot=inMap[postorder[poE]];
        int inRoot=inMap[root->val];

        int inLeft=inRoot-inS;

        root->left=Tree( inorder, inS, inRoot-1,   postorder, poS, poS+inLeft-1, inMap);
        root->right=Tree(inorder, inRoot+1, inE,   postorder, poS+inLeft, poE-1, inMap);


        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {

        map<int,int>inMap;
         int n=inorder.size();

        for(int i=0; i<n ; i++){
            inMap[inorder[i]]=i;
        }
       

        TreeNode* root=Tree(inorder, 0,n-1,  postorder, 0, n-1, inMap );

        return root;
        
    }
};